@page "/Login"
@using Hand_in1.Authentication
@namespace LoginComponent

@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<AuthorizeView>
    <NotAuthorized>
        <div class="form-group">
            <label> <br> Username: </label>
            <input type="text" placeholder="username" @bind-value="username"/>
        </div>
        <div class="form-group">
            <label> <br> &nbsp Password: </label> 
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color: red">@errorMessage</div>
        <a href="" @onclick="PerformLogin">Login</a>
    </NotAuthorized>
    <Authorized>
        <a href="" @onclick="PerformLogout">Logout</a>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            await ((CustomAuthenticationStateProvider) _authenticationStateProvider).Logout();
            _navigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}