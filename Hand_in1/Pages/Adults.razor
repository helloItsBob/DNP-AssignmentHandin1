@page "/Adults"
@using Hand_in1.Models
@using Hand_in1.Data
@inject IAdultService _webAdultService
@inject NavigationManager _navigationManager

<br>

<AuthorizeView Policy="SecurityLevel1">
    <div id="form-container-filter">
        <div id="left">
            <p>
                Global search: <br/>
                <input type="text" placeholder="Filter keyword..." @bind="Filter" @bind:event="oninput"
                       style="width: 150px;height: 30px"/>
            </p>
        </div>
        <div id="right">
            <p>
                Filter by gender:
                <select class="form-control selectpicker" @onchange="@(FilterByGender)" style="width: 150px;height: 30px">
                    <option>All</option>
                    <option>M</option>
                    <option>F</option>
                </select>
            </p>
        </div>
        <br/>
    </div>

    <hr/>
</AuthorizeView>

@if (_adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_adultsToShow.Any())
{
    <p>
        <em>No Adult items, please create some!</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Surname</th>
            <AuthorizeView Policy="SensitiveInfo">
                <th>Hair-color</th>
                <th>Eye-color</th>
            </AuthorizeView>
            <th>Age</th>
            <AuthorizeView Policy="SensitiveInfo">
                <th>Weight(kg)</th>
                <th>Height(cm)</th>
            </AuthorizeView>
            <th>Sex</th>
            <th>Job Title</th>
            <AuthorizeView Policy="SensitiveInfo">
                <th>Salary</th>
            </AuthorizeView>

            <AuthorizeView Policy="CanDeleteAdults">
                <th>Remove</th>
            </AuthorizeView>
            <AuthorizeView Policy="SecurityLevel2">
                <th>Edit</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _adultsToShow)
        {
            if (!IsVisible(item))
                continue;
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <AuthorizeView Policy="SensitiveInfo">
                    <td>@item.HairColor</td>
                    <td>@item.EyeColor</td>
                </AuthorizeView>
                <td>@item.Age</td>
                <AuthorizeView Policy="SensitiveInfo">
                    <td>@item.Weight</td>
                    <td>@item.Height</td>
                </AuthorizeView>
                <td>@item.Sex</td>
                <td>@item.JobTitle.JobTitle</td>
                <AuthorizeView Policy="SensitiveInfo">
                    <td>@item.JobTitle.Salary</td>
                </AuthorizeView>

                <AuthorizeView Policy="CanDeleteAdults">
                    <td>
                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                </AuthorizeView>

                <AuthorizeView Policy="SecurityLevel2">
                    <td>
                        <button @onclick="@(() => EditAdult(item.Id))">
                            <i class="oi oi-pencil"></i>
                        </button>
                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}


@code {

    private string Filter { get; set; }

    private bool IsVisible(Adult adult) // global filter
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (adult.FirstName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (adult.LastName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (adult.JobTitle.JobTitle.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (adult.HairColor.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (adult.EyeColor.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (adult.Id.ToString().StartsWith(Filter) || adult.Age.ToString().StartsWith(Filter))
            return true;

        if (adult.Weight.ToString().StartsWith(Filter) || adult.Height.ToString().StartsWith(Filter))
            return true;

        if (adult.JobTitle.Salary.ToString().StartsWith(Filter))
            return true;

        return false;
    }

    private IList<Adult> _allAdults;
    private static IList<Adult> _adultsToShow;

#nullable enable

    private void FilterByGender(ChangeEventArgs args)
    {
        string? filterByGender = null;
        try
        {
            filterByGender = (string) args.Value!;
        }
        catch (Exception e)
        {
    // ignored
        }

        if (filterByGender != null)
        {
            _adultsToShow = _allAdults.Where(a => a.Sex == filterByGender).ToList();
        }
        if (filterByGender!.Equals("All"))
        {
            filterByGender = null;
            _adultsToShow = _allAdults;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allAdults = await _webAdultService.ReadAllAsync();
        _adultsToShow = _allAdults;
    }

    private async Task RemoveAdult(int adultId)
    {
        Adult toRemove = _allAdults.First(a => a.Id == adultId);
        await _webAdultService.DeleteAsync(adultId);
        _allAdults.Remove(toRemove);
    }

    private void EditAdult(int adultId)
    {
        try
        {
            _navigationManager.NavigateTo($"Edit/{adultId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}